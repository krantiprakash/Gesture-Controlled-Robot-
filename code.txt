Hand module code: 
=================
1.Arduino code: 
----------------
#include <Wire.h>
#include <SPI.h>

//Gyro Variables
float elapsedTime, time, timePrev;        //Variables for time control
int gyro_error = 0;                         //We use this variable to only calculate once the gyro data error
float Gyr_rawX, Gyr_rawY, Gyr_rawZ;     //Here we store the raw data read 
float Gyro_angle_x, Gyro_angle_y;         //Here we store the angle value obtained with Gyro data
float Gyro_raw_error_x, Gyro_raw_error_y; //Here we store the initial gyro data error

//Acc Variables
int acc_error = 0;                         //We use this variable to only calculate once the Acc data error
float rad_to_deg = 180 / 3.141592654;      //This value is for pasing from radians to degrees values
float Acc_rawX, Acc_rawY, Acc_rawZ;    //Here we store the raw data read 
float Acc_angle_x, Acc_angle_y;          //Here we store the angle value obtained with Acc data
float Acc_angle_error_x, Acc_angle_error_y; //Here we store the initial Acc data error

float Total_angle_x, Total_angle_y;


//Sending values to NodeMCU (SPI variables)
volatile boolean received;
volatile byte Slavereceived;
float Slavesend;
int x;


void setup() {

    Wire.begin();

    Wire.beginTransmission(0x68);
    Wire.write(0x6B);
    Wire.write(0x00);
    Wire.endTransmission(true);
    //Gyro config
    Wire.beginTransmission(0x68);
    Wire.write(0x1B);
    Wire.write(0x10);
    Wire.endTransmission(true);
    //Acc config
    Wire.beginTransmission(0x68);
    Wire.write(0x1C);
    Wire.write(0x10);
    Wire.endTransmission(true);

    Serial.begin(115200);
    time = millis();


    if (acc_error == 0)
    {
        for (int a = 0; a < 200; a++)
        {
            Wire.beginTransmission(0x68);
            Wire.write(0x3B);
            Wire.endTransmission(false);
            Wire.requestFrom(0x68, 6, true);

            Acc_rawX = (Wire.read() << 8 | Wire.read()) / 4096.0;
            Acc_rawY = (Wire.read() << 8 | Wire.read()) / 4096.0;
            Acc_rawZ = (Wire.read() << 8 | Wire.read()) / 4096.0;


            /*---X---*/
            Acc_angle_error_x = Acc_angle_error_x + ((atan((Acc_rawY) / sqrt(pow((Acc_rawX), 2) + pow((Acc_rawZ), 2))) * rad_to_deg));
            /*---Y---*/
            Acc_angle_error_y = Acc_angle_error_y + ((atan(-1 * (Acc_rawX) / sqrt(pow((Acc_rawY), 2) + pow((Acc_rawZ), 2))) * rad_to_deg));

            if (a == 199)
            {
                Acc_angle_error_x = Acc_angle_error_x / 200;
                Acc_angle_error_y = Acc_angle_error_y / 200;
                acc_error = 1;
            }
        }
    }//end of acc error calculation   



    if (gyro_error == 0)
    {
        for (int i = 0; i < 200; i++)
        {
            Wire.beginTransmission(0x68);
            Wire.write(0x43);
            Wire.endTransmission(false);
            Wire.requestFrom(0x68, 4, true);

            Gyr_rawX = Wire.read() << 8 | Wire.read();
            Gyr_rawY = Wire.read() << 8 | Wire.read();

            /*---X---*/
            Gyro_raw_error_x = Gyro_raw_error_x + (Gyr_rawX / 32.8);
            /*---Y---*/



            Gyro_raw_error_y = Gyro_raw_error_y + (Gyr_rawY / 32.8);

            \
                if (i == 199)
                {
                    Gyro_raw_error_x = Gyro_raw_error_x / 200;
                    Gyro_raw_error_y = Gyro_raw_error_y / 200;
                    gyro_error = 1;
                }
        }
    }//end of gyro error calculation


    pinMode(MISO, OUTPUT);

    SPCR |= _BV(SPE);
    received = false;

    SPI.attachInterrupt();


}//end of setup void

ISR(SPI_STC_vect) {
    Slavereceived = SPDR;
    received = true;
}


void loop() {
    timePrev = time;
    time = millis();
    elapsedTime = (time - timePrev) / 1000;
    //////////////////////////////////////Gyro read/////////////////////////////////////

    Wire.beginTransmission(0x68);
    Wire.write(0x43);
    Wire.endTransmission(false);
    Wire.requestFrom(0x68, 4, true);

    Gyr_rawX = Wire.read() << 8 | Wire.read();
    Gyr_rawY = Wire.read() << 8 | Wire.read();

    /*---X---*/
    Gyr_rawX = (Gyr_rawX / 32.8) - Gyro_raw_error_x; // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
    /*---Y---*/
    Gyr_rawY = (Gyr_rawY / 32.8) - Gyro_raw_error_y;  //0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)


    /*---X---*/
    Gyro_angle_x = Gyr_rawX * elapsedTime;
    /*---X---*/
    Gyro_angle_y = Gyr_rawY * elapsedTime;




    //////////////////////////////////////Acc read/////////////////////////////////////

    Wire.beginTransmission(0x68);
    Wire.write(0x3B);
    Wire.endTransmission(false);
    Wire.requestFrom(0x68, 6, true);

    Acc_rawX = (Wire.read() << 8 | Wire.read()) / 4096.0;
    Acc_rawY = (Wire.read() << 8 | Wire.read()) / 4096.0;
    Acc_rawZ = (Wire.read() << 8 | Wire.read()) / 4096.0;

    /*---X---*/
    Acc_angle_x = (atan((Acc_rawY) / sqrt(pow((Acc_rawX), 2) + pow((Acc_rawZ), 2))) * rad_to_deg) - Acc_angle_error_x;
    /*---Y---*/
    Acc_angle_y = (atan(-1 * (Acc_rawX) / sqrt(pow((Acc_rawY), 2) + pow((Acc_rawZ), 2))) * rad_to_deg) - Acc_angle_error_y;


    //////////////////////////////////////Total angle and filter/////////////////////////////////////
    /*---X axis angle---*/
    Total_angle_x = 0.98 * (Total_angle_x + Gyro_angle_x) + 0.02 * Acc_angle_x;
    /*---Y axis angle---*/
    Total_angle_y = 0.98 * (Total_angle_y + Gyro_angle_y) + 0.02 * Acc_angle_y;





    /*Serial.print("Xº: ");
    Serial.print(Total_angle_x);
    Serial.print("   ");
    Serial.print("Yº: ");
    Serial.print(Total_angle_y);
    Serial.println(" ");*/

    float Xaxis = (Total_angle_x + 90) * 0.711;
    float Yaxis = (Total_angle_y + 90) * 0.711 + 128;

    int a = 0;



    /*Serial.print("Xº: ");
    Serial.print(Xaxis);
    Serial.print("   ");
    Serial.print("Yº: ");
    Serial.print(Yaxis);
    Serial.println(" ");*/

    if (received == true) {
        if (a == 0) {
            if (Xaxis >= 0 && Xaxis <= 128) {
                x = Xaxis;
                Slavesend = x;
                Serial.println(Slavesend);
                SPDR = Slavesend;
                delay(100);
            }
            a = 1;
        }
        if (a == 1) {
            if (Yaxis > 128 && Yaxis <= 256) {
                x = Yaxis;
                Slavesend = x;
                Serial.println(Slavesend);
                SPDR = Slavesend;
                delay(100);
            }
            a = 0;
        }
    }
}


-------------------------------------
2.NodeMCU code
--------------
#include <SPI.h>                             //Library for SPI 
#include <ESP8266WiFi.h>


int x;

byte ledPin = 2;
char ssid[] = "paya1";
char pass[] = "billu12345";
WiFiServer server(80);

IPAddress ip(192, 168, 29, 83);            // IP address of the server
IPAddress gateway(192, 168, 29, 1);           // gateway of your network
IPAddress subnet(255, 255, 255, 0);          // subnet mask of your network


void setup(void) {
    Serial.begin(115200);                   //Starts Serial Communication at Baud Rate 115200 

    pinMode(D1, INPUT);

    SPI.begin();                            //Begins the SPI commnuication
    SPI.setClockDivider(SPI_CLOCK_DIV8);    //Sets clock for SPI communication at 8 (16/8=2Mhz)
    digitalWrite(SS, HIGH);                  // Setting SlaveSelect as HIGH (So master doesnt connnect with slave)

    WiFi.config(ip, gateway, subnet);
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(500);
    }
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    server.begin();
    pinMode(ledPin, OUTPUT);
}

void loop(void)
{
    int Mastersend;
    float Mastereceive;

    Mastersend = x;
    Mastereceive = SPI.transfer(Mastersend); //Send the mastersend value to slave also receives value from slave

    String values = String(Mastereceive, 2);
    //Serial.println(Mastereceive);
    delay(50);

    if (Mastereceive >= 0) {
        digitalWrite(LED_BUILTIN, LOW);
    }
    else
    {
        digitalWrite(LED_BUILTIN, HIGH);
    }

    Serial.println(values);

    //delay(100);

    WiFiClient client = server.available();
    if (client) {
        if (client.connected()) {
            digitalWrite(ledPin, LOW);
            Serial.println(".");
            String request = client.readStringUntil('\r');
            //Serial.print("From client: ");
            //Serial.print(request);
            client.flush();
            //client.println("Hi client! No, I am listening.\r");
            client.println(values);
            /*if (button == LOW) {
                int a = 10000;
                client.println(a);
                Serial.println(a);
            }*/
            digitalWrite(ledPin, HIGH);
        }
        client.stop();
    }
}

==================================================================================
Robot car code:
------------------
3.Arduino code:
-----------------
#include <SPI.h>                             //Library for SPI 
#include <ESP8266WiFi.h>


int x;

byte ledPin = 2;
char ssid[] = "paya1";
char pass[] = "billu12345";
WiFiServer server(80);

IPAddress ip(192, 168, 29, 83);            // IP address of the server
IPAddress gateway(192, 168, 29, 1);           // gateway of your network
IPAddress subnet(255, 255, 255, 0);          // subnet mask of your network


void setup(void) {
    Serial.begin(115200);                   //Starts Serial Communication at Baud Rate 115200 

    pinMode(D1, INPUT);

    SPI.begin();                            //Begins the SPI commnuication
    SPI.setClockDivider(SPI_CLOCK_DIV8);    //Sets clock for SPI communication at 8 (16/8=2Mhz)
    digitalWrite(SS, HIGH);                  // Setting SlaveSelect as HIGH (So master doesnt connnect with slave)

    WiFi.config(ip, gateway, subnet);
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(500);
    }
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    server.begin();
    pinMode(ledPin, OUTPUT);
}

void loop(void)
{
    int Mastersend;
    float Mastereceive;

    Mastersend = x;
    Mastereceive = SPI.transfer(Mastersend); //Send the mastersend value to slave also receives value from slave

    String values = String(Mastereceive, 2);
    //Serial.println(Mastereceive);
    delay(50);

    if (Mastereceive >= 0) {
        digitalWrite(LED_BUILTIN, LOW);
    }
    else
    {
        digitalWrite(LED_BUILTIN, HIGH);
    }

    Serial.println(values);

    //delay(100);

    WiFiClient client = server.available();
    if (client) {
        if (client.connected()) {
            digitalWrite(ledPin, LOW);
            Serial.println(".");
            String request = client.readStringUntil('\r');
            //Serial.print("From client: ");
            //Serial.print(request);
            client.flush();
            //client.println("Hi client! No, I am listening.\r");
            client.println(values);
            /*if (button == LOW) {
                int a = 10000;
                client.println(a);
                Serial.println(a);
            }*/
            digitalWrite(ledPin, HIGH);
        }
        client.stop();
    }
}

----------------------------
4. NodeMCU code:
--------------------
#include <SPI.h>
#include <ESP8266WiFi.h>
#include <Wire.h>

byte ledPin = 2;
char ssid[] = "paya1";           // SSID of your home WiFi
char pass[] = "billu12345";            // password of your home WiFi

unsigned long askTimer = 0;

IPAddress server(192, 168, 29, 83);       // the fix IP address of the server
WiFiClient client;
//WiFiServer server(80);

void setup() {
    Serial.begin(115200);               // only for debug
    WiFi.begin(ssid, pass);             // connects to the WiFi router
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(500);
    }
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    /*  Serial.println("Connected to wifi");
      Serial.print("Status: "); Serial.println(WiFi.status());    // Network parameters
      Serial.print("IP: ");     Serial.println(WiFi.localIP());
      Serial.print("Subnet: "); Serial.println(WiFi.subnetMask());
      Serial.print("Gateway: "); Serial.println(WiFi.gatewayIP());
      Serial.print("SSID: "); Serial.println(WiFi.SSID());
      Serial.print("Signal: "); Serial.println(WiFi.RSSI());*/
    pinMode(ledPin, OUTPUT);
    Wire.begin(D1, D2);

}

void loop() {
    client.connect(server, 80);   // Connection to the server
    digitalWrite(ledPin, LOW);    // to show the communication only (inverted logic)
    //Serial.println(".");
    client.println("Hello server! Are you sleeping?\r");  // sends the message to the server
    String answer = client.readStringUntil('\r');   // receives the answer from the sever
    //Serial.println("from server: " + answer);
    Serial.println(answer);
    
    int val = answer.toInt();

    byte buffer[10];
    buffer[0] = lowByte(val);
    buffer[1] = highByte(val);
    
    Wire.beginTransmission(8);
    Wire.write(buffer, 2);
    Wire.endTransmission();

    client.flush();
    digitalWrite(ledPin, HIGH);
    //delay(100);                  // client will trigger the communication after two seconds
}